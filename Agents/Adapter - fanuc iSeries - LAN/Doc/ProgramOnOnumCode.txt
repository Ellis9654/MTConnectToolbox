


int CiSeries::getLine()
{
	std::string prognum,progname;

	short ret;
	if (!_adapter->mConnected)
		return -1;


	ODBPRO buf ;
	ret = cnc_rdprgnum( _adapter->mFlibhndl, &buf ) ; // 15,16,18,21,0,powermate
	if (ret == EW_OK)
	{
		prognum=StdStringFormat("O%04hd", buf.data); // mdata -  Main program number. data- Running program number.
	}
	else
	{
		LogErrorMessage(" CiSeries::cnc_rdprgnum FAILED\n", ret );
	}

	if(Globals.ProgramLogic == "FirstComment")
	{

		PRGDIR2 prg[BUFSIZE+1];
		short i, num;
		short top = 0;
		std::string sLine;
		do {
			num = BUFSIZE;
			ret = cnc_rdprogdir2( _adapter->mFlibhndl, 1, &top, &num, prg );

			if ( ret == EW_NUMBER ) 
				break;

			if ( ret ) 
			{
				LogErrorMessage("iSeries::cnc_rdprogdir2 ERROR\n", ret );
				break;
			}

			for ( i = 0 ; i < num ; i++ ) 
			{
				sLine = prg[i].comment;
				
				// Search for O#
				int value;
				if(sscanf(sLine.c_str(), "O%d", &value) != 1)
					continue;


				int n = sLine.rfind("(");
				int m= sLine.find(")");
				if(std::string::npos !=n && std::string::npos !=m)
					sLine= sLine.substr(n+1,m-n-1);
				if(!sLine.empty() && sLine != "()" )
					progname=sLine;
				if(!sLine.empty())
					break;
			}

			top = prg[num-1].number + 1;

			if(!sLine.empty())
				break;
		} while ( num >= BUFSIZE );
	}

	if(!progname.empty())
	{
		_adapter->SetMTCTagValue("program", progname);
	}
	else if(!prognum.empty())
	{
		_adapter->SetMTCTagValue("program", prognum);
	}
	else
	{
		_adapter->SetMTCTagValue("program", "O1");
	}
	return EW_OK;
}
