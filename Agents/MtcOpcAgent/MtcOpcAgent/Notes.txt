
Tue 09/19/2017_14:53:38.35  
https://msdn.microsoft.com/en-us/library/windows/desktop/ms680621(v=vs.85).aspx


		// If remote and process not running throw exception
		//if(!_CNCTaskListCmd.empty() && !_gszCncControllerProcessName.empty())
		//{
		//	CFindRemoteProcess findRemoteProcess;
		//	if(! findRemoteProcess.FindExeProcess(_gszCncControllerProcessName,_CNCTaskListCmd))
		//		throw StdStringFormat( _T("WARNING: Controller %s not running on machine %s not running\n"), 
		//		_gszCncControllerProcessName.c_str(),
		//		_opcservermachine.c_str());
		//}
		//// If local and process not running throw exception
		//else if(_CNCTaskListCmd.empty() && !_gszCncControllerProcessName.empty())
		//{
		//	if(!FindProcessId(_gszCncControllerProcessName))
		//		throw StdStringFormat( _T("WARNING: Controller %s not running on local machine\n"),  _gszCncControllerProcessName.c_str());;
		//}
		// if both empty, just hope the CNC is running

		//CWmiHandler wbmem;
		//wbmem.IsRunning(_opcservermachine, _gszCncControllerProcessName, L"michalos_a", L"jlm&&cbm1984", L"MELAD");




		//try
		//{
		//	if(_nPingTimeout <=0)
		//		throw StdStringFormat( _T("WARNING: Couldn't negative ping %d machine=%s"),_nPingTimeout, _opcservermachine.c_str());
		//	boost::asio::io_service io_service;
		//	pinger p(io_service, _opcservermachine.c_str());
		//	io_service.run();
		//}
		//catch (std::exception& e)
		//{
		//	throw StdStringFormat( _T("WARNING: Couldn't ping machine=%s error %s"), _opcservermachine.c_str(), e.what());
		//}

* Fri 04/26/13 11:45:00 AM

- now agent has initial conditions - no default or empty constructor :(
Agent(const std::string& configXmlPath, int aBufferSize, int aMaxAssets
UPSHOT - removed setAgent(new AgentEx()); and handleExtensionCall force webserver vbs use

- for Windows 7 removed srpm2, fake rpm with lag, and any alaram stuff - ouch


// Connect socket
if  (WSAConnect(SocketPrimary, (struct sockaddr *)&ServerAddr, sizeof(ServerAddr), NULL, NULL, NULL, NULL) == SOCKET_ERROR)
{
    int Result = WSAGetLastError();
    if (Result != WSAEWOULDBLOCK)
    {
        LogToEventLog(EVENTLOG_WARNING_TYPE, EVENTID_WINSOCK_ERROR, _T("Primary server connection failed -  to connect to server with error %ld"), Result);
        Close(SocketPrimary, TRUE);
        return false;
    }

    // Wait for connect (use select as the socket is non-blocking at this time)
    fd_set WriteFDS, ErrorFDS;
    FD_ZERO(&WriteFDS);
    FD_ZERO(&ErrorFDS);
    FD_SET(SocketPrimary, &WriteFDS);

    TIMEVAL Timeout;
    Timeout.tv_sec = ConnectTimeOut / 1000;
    Timeout.tv_usec = (ConnectTimeOut % 1000) * 1000;

    Result = select(0, NULL, &WriteFDS, &ErrorFDS, &Timeout);
    if (Result == SOCKET_ERROR)
    {
        LogToEventLog(EVENTLOG_WARNING_TYPE, EVENTID_WINSOCK_ERROR, _T(" Primary server connection failed - a select call with error %ld"), WSAGetLastError());
        Close(SocketPrimary, TRUE);
        return false;
    }

    if (Result == 0)
    {
        LogToEventLog(EVENTLOG_WARNING_TYPE, EVENTID_WINSOCK_ERROR, _T(" Primary server connection failed -  timeout to connect..."));
        Close(SocketPrimary, TRUE);
        return false;
    }

    if (FD_ISSET(SocketPrimary, &ErrorFDS))
    {
        DWORD SocketError;
        getsockopt(SocketPrimary, SOL_SOCKET, SO_ERROR, (char*)&SocketError, sizeof(SocketError));

        LogToEventLog(EVENTLOG_WARNING_TYPE, EVENTID_WINSOCK_ERROR, _T(" Primary server connection failed - to connect to server with error %u"), SocketError);
        Close(SocketPrimary, TRUE);
        return false;
    }
}

// connected ...