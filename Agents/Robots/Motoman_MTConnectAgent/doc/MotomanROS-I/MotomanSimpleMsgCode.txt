


#include "motoman_driver/industrial_robot_client/robot_state_interface.h"

using industrial_robot_client::robot_state_interface::RobotStateInterface;

int main(int argc, char** argv)
{
  const int FS100_state_port = 50241;  // FS100 uses a "non-standard" port to comply with MotoPlus guidelines

  // initialize node
  ros::init(argc, argv, "state_interface");

  // launch the default Robot State Interface connection/handlers
  RobotStateInterface rsi;
  if (rsi.init("" /* default IP address*/, FS100_state_port, false /* legacy mode */))
  {
    rsi.run();
  }
  return 0;
}
//////////////////////////////////////////////////////////////////////////////////
simple_message.h

namespace StandardMsgTypes
{
  enum StandardMsgType
  {
 INVALID = 0,
 PING = 1,

 //TODO: Keeping these message type for the time being.  Refactoring
 // the messages should remove the need for this message.
 JOINT_POSITION = 10,
 JOINT = 10, 
 READ_INPUT = 20,
 WRITE_OUTPUT = 21,

 JOINT_TRAJ_PT = 11,  //Joint trajectory point message (typically for streaming)
 JOINT_TRAJ = 12,	  //Joint trajectory message (typically for trajectory downloading)
 STATUS = 13,         //Robot status message (for reporting the robot state)
 JOINT_TRAJ_PT_FULL = 14,  // Joint trajectory point message (all message fields)
 JOINT_FEEDBACK = 15,      // Feedback of joint pos/vel/accel

 // Begin vendor specific message types (only define the beginning enum value,
 // specific enum values should be defined locally, within in the range reserved
 // here.  Each vendor can reserve up 100 types

 SWRI_MSG_BEGIN     = 1000,
 UR_MSG_BEGIN       = 1100,
 ADEPT_MSG_BEGIN    = 1200,
 ABB_MSG_BEGIN      = 1300,
 FANUC_MSG_BEGIN    = 1400,
 MOTOMAN_MSG_BEGIN  = 2000
  };
}
typedef StandardMsgTypes::StandardMsgType StandardMsgType;

/**
 * \brief Enumeration of communications types (supported by all platforms).
 */
namespace CommTypes
{
  enum CommType
  {
 INVALID = 0,
 TOPIC = 1,
 SERVICE_REQUEST = 2,
 SERVICE_REPLY = 3
  };
}
typedef CommTypes::CommType CommType;

/**
 * \brief Enumeration of reply types (supported by all platforms).  In cases of
 * success or failure, the return data should include the relevant return info.
 */
namespace ReplyTypes
{
  enum ReplyType
  {
 INVALID = 0,
 SUCCESS = 1,
 FAILURE = 2
  };
}
typedef ReplyTypes::ReplyType ReplyType;

class SimpleMessage
{

  SimpleMessage();
  ~SimpleMessage(void);
  /**
   * \brief Initializes a simple message
   *
   * \param message type. Globally unique message ID (see StandardMsgType)
   * \param communications types (see CommType)
   * \param reply code(see ReplyType), only valide if comms type is a reply
   * \param data payload for the message
   bool init(int msgType, int commType, int replyCode,
	          industrial::byte_array::ByteArray &data );
   bool init(int msgType, int commType, int replyCode);
  
   * \brief Initializes a simple message from a generic byte array.  The byte
   * array is assumed to hold a valid message with a HEADER and data payload
  bool init(industrial::byte_array::ByteArray & msg);

  void toByteArray(industrial::byte_array::ByteArray & msg);
  static unsigned int getHeaderSize() { return SimpleMessage::HEADER_SIZE; };
  static unsigned int getLengthSize() { return SimpleMessage::LENGTH_SIZE; };

  /** Gets message type(see StandardMsgType enum above)
  int getMessageType() {return this->message_type_;};
  /** Gets message type(see CommType enum above)
  int getCommType() {return this->comm_type_;};
  int getReplyCode() {return this->reply_code_;};
  /** \brief Gets message length (total size, HEADER + data)
  int getMsgLength() {return this->getHeaderSize() + this->data_.getBufferSize();};
  int getDataLength() {return this->data_.getBufferSize();};
  industrial::byte_array::ByteArray & getData() {return this->data_;};
  bool validateMessage();
//////////////////////////////////////////////////////////////////////////////////
ping_message.h
class PingMessage : public industrial::typed_message::TypedMessage
{
public:

 
  PingMessage(void);
  ~PingMessage(void);
  bool init(industrial::simple_message::SimpleMessage & msg);

  /** Initializes a new ping message
  void init();

  /**The ping message overrides the base method toTopic to always
     * return false.  A ping cannot be sent as a topic.

  bool toTopic(industrial::simple_message::SimpleMessage & msg);

  // Overrides - SimpleSerialize
    bool load(industrial::byte_array::ByteArray *buffer){return true;}
    bool unload(industrial::byte_array::ByteArray *buffer){return true;}
    unsigned int byteLength(){return 0;}


};


//////////////////////////////////////////////////////////////////////////////////
robot_state_interface.h

/**
 * \brief Generic template that reads state-data from a robot controller
 * and publishes matching messages to various ROS topics.
 *
 * Users should replace the default class members
 * to implement robot-specific behavior.
 */

   * \param default_ip default IP address to use for robot connection [OPTIONAL]
   *                    - this value will be used if ROS param "robot_ip_address" cannot be read
   * \param default_port default port to use for robot connection [OPTIONAL]
   *                    - this value will be used if ROS param "~port" cannot be read
   * \param joint_names list of joint-names for ROS topic
   *   - Count and order should match data sent to robot connection.
   *   - Use blank-name to skip (not publish) a joint-positio

class RobotStateInterface
{
public:
  RobotStateInterface();
 
  bool init(std::string default_ip = "", int default_port = StandardSocketPorts::STATE, bool legacy_mode = false);
  bool init(SmplMsgConnection* connection);
  bool init(SmplMsgConnection* connection, std::vector<std::string>& joint_names);
  bool init(SmplMsgConnection* connection, std::map<int, RobotGroup> robot_groups);

  /**
   * \brief Begin processing messages and publishing topics.
   */
  void run();

  /**
   * \brief get current robot-connection instance.
   *
   * \return current robot connection object
   */
  SmplMsgConnection* get_connection()
  {
    return this->connection_;
  }

  /**
   * \brief get active message-manager object
   *
   * \return current message-manager object
   */
  MessageManager* get_manager()
  {
    return &this->manager_;
  }

  std::vector<std::string> get_joint_names()
  {
    return this->joint_names_;
  }

  std::map<int, RobotGroup> get_robot_groups()
  {
    return this->robot_groups_;
  }

  /**
   * \brief Add a new handler.
   *
   * \param new message-handler for a specific msg-type (ALREADY INITIALIZED).
   * \param replace existing handler (of same msg-type), if exists
   */
  void add_handler(MessageHandler* handler, bool allow_replace = true)
  {
    this->manager_.add(handler, allow_replace);
  }

protected:
  TcpClient default_tcp_connection_;
  JointRelayHandler default_joint_handler_;
  JointFeedbackRelayHandler default_joint_feedback_handler_;
  JointFeedbackExRelayHandler default_joint_feedback_ex_handler_;
  RobotStatusRelayHandler default_robot_status_handler_;

  SmplMsgConnection* connection_;
  MessageManager manager_;
  std::vector<std::string> joint_names_;

  std::map<int, RobotGroup> robot_groups_;

  bool version_0_;
};  // class RobotStateInterface


namespace MotomanMsgTypes
{
enum MotomanMsgType
{
  MOTOMAN_MSG_BEGIN = 2000,
  MOTOMAN_MOTION_CTRL = 2001,
  MOTOMAN_MOTION_REPLY = 2002,
  ROS_MSG_MOTO_JOINT_TRAJ_PT_FULL_EX = 2016, // This is similar to the "Dynamic Joint Point" in REP I0001
  ROS_MSG_MOTO_JOINT_FEEDBACK_EX = 2017, //Similar to Dynamic Joint State on the REP I0001
};
}
typedef MotomanMsgTypes::MotomanMsgType MotomanMsgType;
}  // namespace simple_message
}  // namespace industrial







/**
 * \brief Enumeration of motion reply result codes.
 */
namespace MotionReplyResults
{
enum MotionReplyResult
{
  SUCCESS    = 0,
  TRUE       = 0,
  BUSY       = 1,
  FAILURE    = 2,
  FALSE      = 2,
  INVALID    = 3,
  ALARM      = 4,
  NOT_READY  = 5,
  MP_FAILURE = 6
};
}
typedef MotionReplyResults::MotionReplyResult MotionReplyResult;


namespace MotionReplySubcodes
{
namespace Invalid
{
enum InvalidCode
{
  UNSPECIFIED = 3000,
  MSGSIZE,
  MSGHEADER,
  MSGTYPE,
  GROUPNO,
  SEQUENCE,
  COMMAND,
  DATA = 3010,
  DATA_START_POS,
  DATA_POSITION,
  DATA_SPEED,
  DATA_ACCEL,
  DATA_INSUFFICIENT
};
}  // namespace Invalid

void MotionReply::init(shared_int robot_id, shared_int sequence,
                       shared_int command, MotionReplyResult result,
                       shared_int subcode, shared_real data)
{
  this->setRobotID(robot_id);
  this->setSequence(sequence);
  this->setCommand(command);
  this->setResult(result);
  this->setSubcode(subcode);
  this->clearData();
  this->setData(0, data);
}

std::string MotionReply::getResultString(shared_int code)
{
  switch (code)
  {
  case MotionReplyResults::SUCCESS:
    return "Success";
  case MotionReplyResults::BUSY:
    return "Busy";
  case MotionReplyResults::FAILURE:
    return "Failed";
  case MotionReplyResults::INVALID:
    return "Invalid message";
  case MotionReplyResults::ALARM:
    return "Controller alarm";
  case MotionReplyResults::NOT_READY:
    return "Not Ready";
  case MotionReplyResults::MP_FAILURE:
    return "MotoPlus Error";
  default:
    return "Unknown";
  }
}

namespace NotReady
{
enum NotReadyCode
{
  UNSPECIFIED = 5000,
  ALARM,
  ERROR,
  ESTOP,
  NOT_PLAY,
  NOT_REMOTE,
  SERVO_OFF,
  HOLD,
  NOT_STARTED,
  WAITING_ROS,
  SKILLSEND
};
}  // namespace NotReady
}  // MotionReplySubcodes
std::string MotionReply::getSubcodeString(shared_int code)
{
  switch (code)
  {
  case MotionReplySubcodes::Invalid::UNSPECIFIED:
    return "Unknown";
  case MotionReplySubcodes::Invalid::MSGSIZE:
    return "Invalid message size";
  case MotionReplySubcodes::Invalid::MSGHEADER:
    return "Invalid header";
  case MotionReplySubcodes::Invalid::MSGTYPE:
    return "Invalid message type";
  case MotionReplySubcodes::Invalid::GROUPNO:
    return "Invalid robot ID";
  case MotionReplySubcodes::Invalid::SEQUENCE:
    return "Invalid sequence ID";
  case MotionReplySubcodes::Invalid::COMMAND:
    return "Invalid command";
  case MotionReplySubcodes::Invalid::DATA:
    return "Invalid data";
  case MotionReplySubcodes::Invalid::DATA_START_POS:
    return "Trajectory start position doesn't match current robot position";
  case MotionReplySubcodes::Invalid::DATA_POSITION:
    return "Invalid position data";
  case MotionReplySubcodes::Invalid::DATA_SPEED:
    return "Invalid velocity data";
  case MotionReplySubcodes::Invalid::DATA_ACCEL:
    return "Invalid acceleration data";
  case MotionReplySubcodes::Invalid::DATA_INSUFFICIENT:
    return "Insufficient trajectory data.  Must supply valid time, pos, and velocity fields.";

  case MotionReplySubcodes::NotReady::UNSPECIFIED:
    return "Unknown";
  case MotionReplySubcodes::NotReady::ALARM:
    return "Controller alarm active";
  case MotionReplySubcodes::NotReady::ERROR:
    return "Controller error";
  case MotionReplySubcodes::NotReady::ESTOP:
    return "E-Stop active";
  case MotionReplySubcodes::NotReady::NOT_PLAY:
    return "Controller in TEACH mode";
  case MotionReplySubcodes::NotReady::NOT_REMOTE:
    return "Controller not in REMOTE mode";
  case MotionReplySubcodes::NotReady::SERVO_OFF:
    return "Unable to enable drive power";
  case MotionReplySubcodes::NotReady::HOLD:
    return "Controller in HOLD state";
  case MotionReplySubcodes::NotReady::NOT_STARTED:
    return "MotoRos not started";
  case MotionReplySubcodes::NotReady::WAITING_ROS:
    return "Waiting on ROS";
  case MotionReplySubcodes::NotReady::SKILLSEND:
    return "Waiting on SkillSend";

  default:
    return "Unknown";
  }
}


///////////////////////////////////////////////
JOINT FEEDBACK
enum ValidFieldType
{
  TIME = 0x01, POSITION = 0x02, VELOCITY = 0x04, ACCELERATION = 0x08
};

 *   member:             type                                      size
 *   robot_id            (industrial::shared_types::shared_int)    4  bytes
 *   valid_fields        (industrial::shared_types::shared_int)    4  bytes
 *   time                (industrial::shared_types::shared_real)   4  bytes
 *   positions           (industrial::joint_data)                  40 bytes
 *   velocities          (industrial::joint_data)                  40 bytes
 *   accelerations       (industrial::joint_data)                  40 bytes
class JointFeedback : public industrial::simple_serialize::SimpleSerialize (For serialization)
class JointFeedbackMessage : public industrial::typed_message::TypedMessag
///////////////////////////////////////////////
JOINT MESSAGE
namespace SpecialSeqValues
{
enum SpecialSeqValue
{
  END_TRAJECTORY = -1, STOP_TRAJECTORY = -2
};
}
typedef SpecialSeqValues::SpecialSeqValue SpecialSeqValue;
class JointMessage : public industrial::typed_message::TypedMessage


///////////////////////////////////////////////
WTF?
 * This message simply wraps the industrial::joint_traj_pt_full::JointTrajPtFull data type.
 * The data portion of this typed message matches JointTrajPtFull.

class JointTrajPtFullMessage : public industrial::typed_message::TypedMessage
//////////////////////////////////////////////

 * This message simply wraps the industrial::robot_status::RobotStatus data type.
 * The data portion of this typed message matches RobotStatus.

class RobotStatusMessage : public industrial::typed_message::TypedMessage
//////////////////////////////////////////////
A joint trajectory includes
 * an array of JointTrajPt data types.  The intention for this class is to
 * be loaded into a single message for communication over a simple connection.
class JointTraj : public industrial::simple_serialize::SimpleSerialize
	 * Adds a point value to the end of the buffer
	 * \return true if value set, otherwise false (buffer is full)
	bool addPoint(industrial::joint_traj_pt::JointTrajPt & point);
static const industrial::shared_types::shared_int MAX_NUM_POINTS = 200;

//////////////////////////////////////////////
class JointTrajPt : public industrial::simple_serialize::SimpleSerialize

 * Class encapsulated joint trajectory point data.  The point data
 * serves as a waypoint along a trajectory and is meant to mirror the
 * JointTrajectoryPoint message.
 *
 * This point differs from the ROS trajectory point in the following ways:
 *
 *  - The joint velocity in an industrial robot standard way (as a single value).
 *  - The duration is somewhat different than the ROS timestamp.  The timestamp
 *    specifies when the move should start, where as the duration is how long the
 *    move should take.  A big assumption is that a sequence of points is continuously
 *    executed.  This is generally true of a ROS trajectory but not required.
 *
 * The byte representation of a joint trajectory point is as follow (in order lowest index
 * to highest). The standard sizes are given, but can change based on type sizes:
 *
 *   member:             type                                      size
 *   sequence            (industrial::shared_types::shared_int)    4  bytes
 *   joints              (industrial::joint_data)                  40 bytes
 *   velocity            (industrial::shared_types::shared_real)   4  bytes
 *   duration            (industrial::shared_types::shared_real)   4  bytes

namespace SpecialSeqValues
{
enum SpecialSeqValue
{
  START_TRAJECTORY_DOWNLOAD  = -1, ///< Downloading drivers only: signal start of trajectory
  START_TRAJECOTRY_STREAMING = -2, ///< deprecated, please use START_TRAJECTORY_STREAMING instead
  START_TRAJECTORY_STREAMING = -2, ///< Streaming drivers only: signal start of trajectory
  END_TRAJECTORY  = -3, ///< Downloading drivers only: signal end of trajectory
  STOP_TRAJECTORY = -4  ///< Server should stop the current motion (if any) as soon as possible
};
}
typedef SpecialSeqValues::SpecialSeqValue SpecialSeqValue;










#include "simple_message/simple_message.h"
#include "simple_message/socket/tcp_client.h"
#include "simple_message/socket/tcp_server.h"
#include "simple_message/messages/joint_message.h"
#include "simple_message/joint_data.h"
#include "simple_message/joint_traj_pt.h"
#include "simple_message/messages/joint_traj_pt_message.h"
#include "simple_message/typed_message.h"
#include "simple_message/joint_traj.h"
#include "simple_message/robot_status.h"
#include "simple_message/messages/robot_status_message.h"

#include <gtest/gtest.h>

using namespace industrial::simple_message;
using namespace industrial::tcp_socket;
using namespace industrial::tcp_client;
using namespace industrial::tcp_server;
using namespace industrial::joint_data;
using namespace industrial::joint_message;
using namespace industrial::joint_traj_pt;
using namespace industrial::joint_traj_pt_message;
using namespace industrial::typed_message;
using namespace industrial::joint_traj;
using namespace industrial::robot_status;
using namespace industrial::robot_status_message;

// Message passing routine, used to send and receive a typed message
// Useful for checking the packing and unpacking of message data.
void messagePassing(TypedMessage &send, TypedMessage &recv)
{
  const int tcpPort = TEST_PORT_BASE+401;
  char ipAddr[] = "127.0.0.1";

  TcpClient tcpClient;
  TcpServer tcpServer;
  SimpleMessage msgSend, msgRecv;

  ASSERT_TRUE(send.toTopic(msgSend));

  // Construct server

  ASSERT_TRUE(tcpServer.init(tcpPort));

  // Construct a client
  ASSERT_TRUE(tcpClient.init(&ipAddr[0], tcpPort));
  ASSERT_TRUE(tcpClient.makeConnect());

  ASSERT_TRUE(tcpServer.makeConnect());

  ASSERT_TRUE(tcpClient.sendMsg(msgSend));
  ASSERT_TRUE(tcpServer.receiveMsg(msgRecv));
  ASSERT_TRUE(recv.init(msgRecv));
}

TEST(JointMessage, init)
{
  JointData joint;

  joint.init();
  EXPECT_TRUE(joint.setJoint(0, 1.0));
  EXPECT_TRUE(joint.setJoint(1, 2.0));
  EXPECT_TRUE(joint.setJoint(2, 3.0));
  EXPECT_TRUE(joint.setJoint(3, 4.0));
  EXPECT_TRUE(joint.setJoint(4, 5.0));
  EXPECT_TRUE(joint.setJoint(5, 6.0));
  EXPECT_TRUE(joint.setJoint(6, 7.0));
  EXPECT_TRUE(joint.setJoint(7, 8.0));
  EXPECT_TRUE(joint.setJoint(8, 9.0));
  EXPECT_TRUE(joint.setJoint(9, 10.0));

  EXPECT_FALSE(joint.setJoint(10, 11.0));

}

TEST(JointMessage, equal)
{
  JointData jointlhs, jointrhs;

  jointrhs.init();
  jointlhs.init();
  jointlhs.setJoint(0, -1.0);
  jointlhs.setJoint(9, 1.0);

  EXPECT_FALSE(jointlhs==jointrhs);

  jointrhs.setJoint(0, -1.0);
  jointrhs.setJoint(9, 1.0);

  EXPECT_TRUE(jointlhs==jointrhs);

}

TEST(JointMessage, toMessage)
{
  JointData toMessage, fromMessage;
  JointMessage msg;

  toMessage.init();
  toMessage.setJoint(4, 44.44);

  msg.init(1, toMessage);

  fromMessage.copyFrom(msg.getJoints());

  EXPECT_TRUE(toMessage==fromMessage);

}

TEST(JointMessage, Comms)
{

  JointMessage jointSend, jointRecv;
  JointData posSend, posRecv;

  posSend.init();
  posSend.setJoint(0, 1.0);
  posSend.setJoint(1, 2.0);
  posSend.setJoint(2, 3.0);
  posSend.setJoint(3, 4.0);
  posSend.setJoint(4, 5.0);
  posSend.setJoint(5, 6.0);
  posSend.setJoint(6, 7.0);
  posSend.setJoint(7, 8.0);
  posSend.setJoint(8, 9.0);
  posSend.setJoint(9, 10.0);

  jointSend.init(1, posSend);

  messagePassing(jointSend, jointRecv);

  posRecv.copyFrom(jointRecv.getJoints());
  ASSERT_TRUE(posRecv==posSend);
}

TEST(JointTrajPt, equal)
{
  JointTrajPt lhs, rhs;
  JointData joint;

  joint.init();
  ASSERT_TRUE(joint.setJoint(0, 1.0));
  ASSERT_TRUE(joint.setJoint(1, 2.0));
  ASSERT_TRUE(joint.setJoint(2, 3.0));
  ASSERT_TRUE(joint.setJoint(3, 4.0));
  ASSERT_TRUE(joint.setJoint(4, 5.0));
  ASSERT_TRUE(joint.setJoint(5, 6.0));
  ASSERT_TRUE(joint.setJoint(6, 7.0));
  ASSERT_TRUE(joint.setJoint(7, 8.0));
  ASSERT_TRUE(joint.setJoint(8, 9.0));
  ASSERT_TRUE(joint.setJoint(9, 10.0));

  rhs.init(1.0, joint, 50.0, 100);
  EXPECT_FALSE(lhs==rhs);

  lhs.init(0, joint, 0, 0);
  EXPECT_FALSE(lhs==rhs);

  lhs.copyFrom(rhs);
  EXPECT_TRUE(lhs==rhs);

}

TEST(JointTrajPt, toMessage)
{
  JointTrajPt toMessage, fromMessage;
  JointTrajPtMessage msg;

  toMessage.init();
  toMessage.setSequence(99);
  msg.init(toMessage);

  fromMessage.copyFrom(msg.point_);

  EXPECT_TRUE(toMessage==fromMessage);

}

TEST(JointTrajPt, Comms)
{

  JointTrajPtMessage jointSend, jointRecv;
  JointData data;
  JointTrajPt posSend, posRecv;

  data.init();
  data.setJoint(0, 1.0);
  data.setJoint(1, 2.0);
  data.setJoint(2, 3.0);
  data.setJoint(3, 4.0);
  data.setJoint(4, 5.0);
  data.setJoint(5, 6.0);
  data.setJoint(6, 7.0);
  data.setJoint(7, 8.0);
  data.setJoint(8, 9.0);
  data.setJoint(9, 10.0);
  posSend.init(1, data, 99, 100);

  jointSend.init(posSend);

  messagePassing(jointSend, jointRecv);

  posRecv.copyFrom(jointRecv.point_);
  ASSERT_TRUE(posRecv==posSend);
}

TEST(JointTraj, equal)
{
  JointTraj lhs, rhs;
  JointData joint;
  JointTrajPt point;

  joint.init();
  ASSERT_TRUE(joint.setJoint(0, 1.0));
  ASSERT_TRUE(joint.setJoint(1, 2.0));
  ASSERT_TRUE(joint.setJoint(2, 3.0));
  ASSERT_TRUE(joint.setJoint(3, 4.0));
  ASSERT_TRUE(joint.setJoint(4, 5.0));
  ASSERT_TRUE(joint.setJoint(5, 6.0));
  ASSERT_TRUE(joint.setJoint(6, 7.0));
  ASSERT_TRUE(joint.setJoint(7, 8.0));
  ASSERT_TRUE(joint.setJoint(8, 9.0));
  ASSERT_TRUE(joint.setJoint(9, 10.0));

  point.init(1.0, joint, 50.0, 100);
  rhs.addPoint(point);
  EXPECT_FALSE(lhs==rhs);

  lhs.addPoint(point);
  EXPECT_TRUE(lhs==rhs);

  lhs.addPoint(point);
  EXPECT_FALSE(lhs==rhs);

  lhs.copyFrom(rhs);
  EXPECT_TRUE(lhs==rhs);

}

TEST(RobotStatus, enumerations)
{
  // Verifying the disabled state and aliases match
  EXPECT_EQ(TriStates::TS_DISABLED, TriStates::TS_FALSE);
  EXPECT_EQ(TriStates::TS_DISABLED, TriStates::TS_LOW);
  EXPECT_EQ(TriStates::TS_DISABLED, TriStates::TS_OFF);

  // Verifying the enabled state and aliases values match
  EXPECT_EQ(TriStates::TS_ENABLED, TriStates::TS_TRUE);
  EXPECT_EQ(TriStates::TS_ENABLED, TriStates::TS_HIGH);
  EXPECT_EQ(TriStates::TS_ENABLED, TriStates::TS_ON);

  // Verifying the unknown values match (this isn't reqd, but makes sense)
  EXPECT_EQ(TriStates::TS_UNKNOWN, RobotModes::UNKNOWN);
}

TEST(RobotStatus, init)
{
  RobotStatus status;
  RobotStatus empty;
  status.init();
  // An empty (non-initted) status should be initialized in the constructor.
  EXPECT_TRUE(status==empty);
  EXPECT_EQ(status.getDrivesPowered(), TriStates::TS_UNKNOWN);
  EXPECT_EQ(status.getEStopped(), TriStates::TS_UNKNOWN);
  EXPECT_EQ(status.getErrorCode(), 0);
  EXPECT_EQ(status.getInError(), TriStates::TS_UNKNOWN);
  EXPECT_EQ(status.getInMotion(), TriStates::TS_UNKNOWN);
  EXPECT_EQ(status.getMode(), RobotModes::UNKNOWN);
  EXPECT_EQ(status.getMotionPossible(), TriStates::TS_UNKNOWN);
}

TEST(RobotStatus, equal)
{
  RobotStatus lhs, rhs;

  EXPECT_TRUE(lhs==rhs);
  lhs.setDrivesPowered(TriStates::TS_ENABLED);
  EXPECT_FALSE(lhs==rhs);
  rhs.setDrivesPowered(TriStates::TS_ENABLED);
  EXPECT_TRUE(lhs==rhs);

  lhs.setEStopped(TriStates::TS_ENABLED);
  EXPECT_FALSE(lhs==rhs);
  rhs.setEStopped(TriStates::TS_ENABLED);
  EXPECT_TRUE(lhs==rhs);

  lhs.setErrorCode(99);
  EXPECT_FALSE(lhs==rhs);
  rhs.setErrorCode(99);
  EXPECT_TRUE(lhs==rhs);

  lhs.setInError(TriStates::TS_ENABLED);
  EXPECT_FALSE(lhs==rhs);
  rhs.setInError(TriStates::TS_ENABLED);
  EXPECT_TRUE(lhs==rhs);

  lhs.setInMotion(TriStates::TS_ENABLED);
  EXPECT_FALSE(lhs==rhs);
  rhs.setInMotion(TriStates::TS_ENABLED);
  EXPECT_TRUE(lhs==rhs);

  lhs.setMode(RobotModes::AUTO);
  EXPECT_FALSE(lhs==rhs);
  rhs.setMode(RobotModes::AUTO);
  EXPECT_TRUE(lhs==rhs);

  lhs.setMotionPossible(TriStates::TS_ENABLED);
  EXPECT_FALSE(lhs==rhs);
  rhs.setMotionPossible(TriStates::TS_ENABLED);
  EXPECT_TRUE(lhs==rhs);

}

TEST(RobotStatus, toMessage)
{
  RobotStatus toMessage, fromMessage;
  RobotStatusMessage msg;

  toMessage.init(TriStates::TS_ENABLED, TriStates::TS_FALSE, 99, TriStates::TS_TRUE, TriStates::TS_TRUE, RobotModes::MANUAL,
                 TriStates::TS_DISABLED);
  msg.init(toMessage);

  fromMessage.copyFrom(msg.status_);

  EXPECT_TRUE(toMessage==fromMessage);

}

TEST(RobotStatus, Comms)
{
  RobotStatusMessage statusMsgSend, statusMsgRecv;
  RobotStatus statusSend, statusRecv;

  statusSend.init(TriStates::TS_ENABLED, TriStates::TS_FALSE, 99, TriStates::TS_TRUE, TriStates::TS_TRUE, RobotModes::MANUAL,
                   TriStates::TS_DISABLED);

  statusMsgSend.init(statusSend);

  messagePassing(statusMsgSend, statusMsgRecv);

  statusRecv.copyFrom(statusMsgRecv.status_);
  ASSERT_TRUE(statusRecv==statusSend);
}


/*
 * Software License Agreement (BSD License)
 *
 * Copyright (c) 2013, Southwest Research Institute
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *  notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *  notice, this list of conditions and the following disclaimer in the
 *  documentation and/or other materials provided with the distribution.
 *  * Neither the name of the Southwest Research Institute, nor the names
 *  of its contributors may be used to endorse or promote products derived
 *  from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "motoman_driver/motion_ctrl.h"
#include "motoman_driver/simple_message/motoman_motion_ctrl_message.h"
#include "motoman_driver/simple_message/motoman_motion_reply_message.h"
#include "ros/ros.h"
#include "simple_message/simple_message.h"
#include <string>

namespace MotionControlCmds = motoman::simple_message::motion_ctrl::MotionControlCmds;
namespace MotionReplyResults = motoman::simple_message::motion_reply::MotionReplyResults;
using motoman::simple_message::motion_ctrl::MotionCtrl;
using motoman::simple_message::motion_ctrl_message::MotionCtrlMessage;
using motoman::simple_message::motion_reply_message::MotionReplyMessage;
using industrial::simple_message::SimpleMessage;

namespace motoman
{
namespace motion_ctrl
{

bool MotomanMotionCtrl::init(SmplMsgConnection* connection, int robot_id)
{
  connection_ = connection;
  robot_id_ = robot_id;
  return true;
}

bool MotomanMotionCtrl::controllerReady()
{
  std::string err_str;
  MotionReply reply;

  if (!sendAndReceive(MotionControlCmds::CHECK_MOTION_READY, reply))
  {
    ROS_ERROR("Failed to send CHECK_MOTION_READY command");
    return false;
  }

  return (reply.getResult() == MotionReplyResults::TRUE);
}


bool MotomanMotionCtrl::setTrajMode(bool enable)
{
  MotionReply reply;
  MotionControlCmd cmd = enable ? MotionControlCmds::START_TRAJ_MODE : MotionControlCmds::STOP_TRAJ_MODE;

  if (!sendAndReceive(cmd, reply))
  {
    ROS_ERROR("Failed to send TRAJ_MODE command");
    return false;
  }

  if (reply.getResult() != MotionReplyResults::SUCCESS)
  {
    ROS_ERROR_STREAM("Failed to set TrajectoryMode: " << getErrorString(reply));
    return false;
  }

  return true;
}

bool MotomanMotionCtrl::stopTrajectory()
{
  MotionReply reply;

  if (!sendAndReceive(MotionControlCmds::STOP_MOTION, reply))
  {
    ROS_ERROR("Failed to send STOP_MOTION command");
    return false;
  }

  if (reply.getResult() != MotionReplyResults::SUCCESS)
  {
    ROS_ERROR_STREAM("Failed to Stop Motion: " << getErrorString(reply));
    return false;
  }

  return true;
}

bool MotomanMotionCtrl::sendAndReceive(MotionControlCmd command, MotionReply &reply)
{
  SimpleMessage req, res;
  MotionCtrl data;
  MotionCtrlMessage ctrl_msg;
  MotionReplyMessage ctrl_reply;

  data.init(robot_id_, 0, command, 0);
  ctrl_msg.init(data);
  ctrl_msg.toRequest(req);

  if (!this->connection_->sendAndReceiveMsg(req, res))
  {
    ROS_ERROR("Failed to send MotionCtrl message");
    return false;
  }

  ctrl_reply.init(res);
  reply.copyFrom(ctrl_reply.reply_);

  return true;
}

std::string MotomanMotionCtrl::getErrorString(const MotionReply &reply)
{
  std::ostringstream ss;
  ss << reply.getResultString() << " (" << reply.getResult() << ")";
  ss << " : ";
  ss << reply.getSubcodeString() << " (" << reply.getSubcode() << ")";
  return ss.str();
}


}  // namespace motion_ctrl
}  // namespace motoman


