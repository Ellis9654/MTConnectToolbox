Measurement Plan Name: 113T1359-27
Run Speed: 160 mm/s
Measurement Start Time: 6:40:16 am
Measurement Plan Name: 113T1359-27
Run Speed: 160 mm/s
Measurement Start Time: 6:40:34 am
Measurement End Time: 6:46:46 am
Duration of Run: 00:06:16.0
Date of Run: 2016-6-22

    while ( getline(n, data, line) )
    {
		size_t it;
		if(Trim(line).empty())
			continue;

		std::string tmpplanname;
		long   tmpspeed;
		COleDateTime tmpstarttime, tmpendtime;
		if ( ( it = line.find_first_of(":") ) == std::string::npos )
			continue;

		if ( line.find(line1) == std::string::npos )
			continue;  // skip

		tmpplanname = Trim(line.substr(line1.size()+1));

		getline(n, data, line);
		if ( line.find(line2) == std::string::npos )
			continue;  // skip
		sscanf(Trim(line.substr(line2.size()+1)).c_str(), "%d", &tmpspeed);;

		getline(n, data, line);
		if ( line.find(line3) == std::string::npos )
			continue;  // skip
		GetLogTime (Trim(line.substr(line3.size()+1)), tmpstarttime);
		Executing(tmplanname);

		getline(n, data, line);
		if ( line.find(line4) == std::string::npos )
			continue;  // skip
		GetLogTime (Trim(line.substr(line4.size()+1)), tmpendtime);

		getline(n, data, line);
		if ( line.find(line5) == std::string::npos )
			continue;  // skip

		getline(n, data, line);
		if ( line.find(line6) == std::string::npos )
			continue;  // skip

		//COleDateTime date;
		//GetDateTime (Trim(line.substr(line6.size()+1)), date);
		//starttime=SetLogDate(date,tmpstarttime);
		//endtime=SetLogDate(date,tmpendtime);
		//planname=tmpplanname;
	}

MTConnect Agent Version 1.2.0.0 - built on Wed Jun 22 14:32:49 2016
2016-06-23T00:32:39.0715Z: INFO  [0] init.config: Starting agent on port 5000
2016-06-23T00:32:39.0729Z: ERROR [0] xml.parser: XML: Devices.xml:62:
2016-06-23T00:32:39.0737Z: ERROR [0] xml.parser: XML: parser
2016-06-23T00:32:39.0744Z: ERROR [0] xml.parser: XML: error :
2016-06-23T00:32:39.0750Z: ERROR [0] xml.parser: XML: Opening and ending tag mis
match: Components line 10 and Device

2016-06-23T00:32:39.0765Z: ERROR [0] xml.parser: XML:           </Device>

2016-06-23T00:32:39.0773Z: ERROR [0] xml.parser: XML:                    ^

2016-06-23T00:32:39.0782Z: ERROR [0] xml.parser: XML: Devices.xml:63:
2016-06-23T00:32:39.0790Z: ERROR [0] xml.parser: XML: parser
2016-06-23T00:32:39.0797Z: ERROR [0] xml.parser: XML: error :
2016-06-23T00:32:39.0804Z: ERROR [0] xml.parser: XML: expected '>'

2016-06-23T00:32:39.0812Z: ERROR [0] xml.parser: XML: </Devices>

2016-06-23T00:32:39.0820Z: ERROR [0] xml.parser: XML:         ^

2016-06-23T00:32:39.0828Z: ERROR [0] xml.parser: XML: Devices.xml:64:
2016-06-23T00:32:39.0836Z: ERROR [0] xml.parser: XML: parser
2016-06-23T00:32:39.0844Z: ERROR [0] xml.parser: XML: error :
2016-06-23T00:32:39.0851Z: ERROR [0] xml.parser: XML: Opening and ending tag mis
match: Devices line 4 and MTConnectDevices

2016-06-23T00:32:39.0868Z: ERROR [0] xml.parser: XML: </MTConnectDevices>

2016-06-23T00:32:39.0880Z: ERROR [0] xml.parser: XML:                    ^

2016-06-23T00:32:39.0890Z: ERROR [0] xml.parser: XML: Devices.xml:65:
2016-06-23T00:32:39.0899Z: ERROR [0] xml.parser: XML: parser
2016-06-23T00:32:39.0907Z: ERROR [0] xml.parser: XML: error :
2016-06-23T00:32:39.0916Z: ERROR [0] xml.parser: XML: Premature end of data in t
ag MTConnectDevices line 2

2016-06-23T00:32:39.0933Z: ERROR [0] xml.parser: XML:

2016-06-23T00:32:39.0942Z: ERROR [0] xml.parser: XML: ^

2016-06-23T00:32:39.0955Z: FATAL [0] agent: Error loading xml configuration: Dev
ices.xml
2016-06-23T00:32:39.0967Z: FATAL [0] agent: Error detail: XML Error at d:\michal
os\michalos\visual studio 2010\projects\agents\zeissmtconnectagent\mtconnectagen
t\agent\xml_parser.cpp(92): mDoc = xmlReadFile(aPath.c_str(), NULL, XML_PARSE_NO
BLANKS)
XML Error at d:\michalos\michalos\visual studio 2010\projects\agents\zeissmtconn
ectagent\mtconnectagent\agent\xml_parser.cpp(92): mDoc = xmlReadFile(aPath.c_str
(), NULL, XML_PARSE_NOBLANKS)
2016-06-23T00:32:40.0034Z: FATAL [0] init.config: Agent failed to load: XML Erro
r at d:\michalos\michalos\visual studio 2010\projects\agents\zeissmtconnectagent
\mtconnectagent\agent\xml_parser.cpp(92): mDoc = xmlReadFile(aPath.c_str(), NULL
, XML_PARSE_NOBLANKS)



BY_HANDLE_FILE_INFORMATION fInfo = {0};
GetFileInformationByHandle(hFile, &fInfo);
if(fInfo.dwFileAttributes && FILE_FLAG_DELETE_ON_CLOSE)
{
    std::cout << "Attributes say this file is deleted." << std::endl;
}


sc create Agent  binPath="ZeissAgent.exe"

cd /d %~dp0
cacls . /t  /c  /GRANT Everyone:F
pause


sc.exe create Agent  binPath= 

sc.exe stop Agent
sc.exe delete Agent

Remove trailing \n
	//std::string msg = (errmsg.rfind("\n") != std::string::npos) ? errmsg.substr(0,errmsg.size()-1) : errmsg;

Last time File was modified:
#include <sys/stat.h>
	
#include <unistd.h>	
#include <time.h>
	
struct tm* clock;				// create a time structure	
struct stat attrib;			// create a file attribute structure        
stat("afile.txt", &attrib);		// get the attributes of afile.txt	
clock = gmtime(&(attrib.st_mtime));
---------------------
CFile::GetStatus(CFileStatus &rStatus)

CFileStatus structure components


CTime m_ctime - creation
CTime m_mtime - last modification
CTime m_atime - last accessed
long m_size - logical size in bytes
byte m_attribute - attribute byte of the file
char m_szFullName[_MaxSize] absolute filename

/////////////////////////////////////////////
ULONGLONG GetFileSizeEx( CString strPath )
{  
   WIN32_FIND_DATA FindData = { 0 };
   //gets a file search handle
   HANDLE hFirstFile = FindFirstFile( strPath, &FindData );  
  
   //if the handle is valid
   if( hFirstFile != INVALID_HANDLE_VALUE )
   {
      //closes the file search handle
      FindClose( hFirstFile );
     
      ULONGLONG FileSize = FindData.nFileSizeHigh;
      FileSize <<= sizeof( FindData.nFileSizeHigh ) * 8; // Push by count of bits
      FileSize |= FindData.nFileSizeLow;
     
      return FileSize;
   }
  
   return 0; // File not found
}



		std::vector<std::string> keys = config.getkeys(tagdefs);
		if(tags.size() < 1 || keys.size() < 1 )
			throw std::exception(StdStringFormat("Error: No [%s] Section or Keys?\n", tagdefs.c_str()).c_str());

		for(int i=0; i<keys.size(); i++)
		{
			Item * item = new Item();
			item->_alias=keys[i];

			// make sure its is an OPC Tag
			if(item->_alias.find(_T("Tag.")) == 0)
			{
				item->_alias=ReplaceOnce(item->_alias, _T("Tag."), _T(""));
				item->vt=VT_BSTR;
			}
			if(item->_alias.find(_T("Enum."))==0)
			{
				item->_type=_T("Enum");
				item->_subtype="Enumeration";
				item->_value=item->_lastvalue= config.GetSymbolValue(tagdefs+"."+ keys[i]).c_str();
				//item->_tagname No tagname
				items.push_back(item);
				continue;
			}
			else if(item->_alias.find(_T("Const."))==0)
			{
				item->_alias=ReplaceOnce(item->_alias,_T("Const."), _T(""));
				item->vt= VT_USERDEFINED;
				item->_subtype="Constant";
			}

			// THese must be DDE lookup
			if(item->_alias.find(_T("Sample."))==0)
			{
				item->_alias=ReplaceOnce(item->_alias,_T("Sample."), _T(""));
				item->_type=_T("Sample");
			}
			else if(item->_alias.find(_T("Event."))==0)
			{
				item->_alias=ReplaceOnce(item->_alias,_T("Event."), _T(""));
				item->_type=_T("Event");
			}
			else if(item->_alias.find(_T("DDE."))==0)  // reads opc values does not send to MT Connect
			{
				item->_alias=ReplaceOnce(item->_alias, _T("DDE."), _T(""));  // OPC value for scripting
				item->_type=_T("DDE");
			}
			else if(item->_alias.find(_T("Condition."))==0)
			{
				item->_alias=ReplaceOnce(item->_alias,_T("Condition."), _T(""));
				item->_type="Condition";
			}
			std::string tmp= config.GetSymbolValue(tagdefs+"."+ keys[i]).c_str();
			item->_tagname=tmp;
			items.push_back(item);
		}
		for(int i = 0 ; i < items.size(); i++)
		{
			//if(items[i]->_type==_T("Event") || items[i]->_type==_T("Sample"))
			//	items[i]->_event= new Event(items[i]->_tagname.c_str());
		}

		// SLOW SLOW SLOW
		//std::string contents;
		//ReadFile(::ExeDirectory()+"ProductionLog.csv",contents);
		//std::vector<std::string> lines = TrimmedTokenize(contents,"\n");
		/*for(int i=0; i< lines.size(); i++)
		{
			std::vector<std::string> tokens = TrimmedTokenize(lines[i],";");
			COleDateTime timestamp;
			if(tokens.size()<=0)
				continue;
			timestamp=GetDateTime(tokens[0]);
			timestamp=COleDateTime(timestamp.GetYear(), timestamp.GetMonth(), timestamp.GetDay(), 0, 0, 0);
			if(timestamp == today)
			{
				for(int j=1; j< tokens.size(); j++);
			}
		}*/


			//// Read and skip lines till current day
			//while ( getline(data,line) )
			//{
			//	COleDateTime timestamp=GetDateTime(line.c_str());
			//	timestamp=COleDateTime(timestamp.GetYear(), timestamp.GetMonth(), timestamp.GetDay(), 0, 0, 0);
			//	if(timestamp == today)
			//	{
			//		break;
			//	}
			//}

	
	
	#if 0
		HANDLE hFile = CreateFile(filename.c_str(),
                          GENERIC_READ, // access (read) mode
                          FILE_SHARE_READ|FILE_SHARE_WRITE|FILE_SHARE_DELETE, // share mode
                          NULL, // pointer to security attributes
                          OPEN_EXISTING, // how to create
                          FILE_ATTRIBUTE_NORMAL,// file attributes
                          NULL); // handle to file with attributes to copy
		if (hFile == INVALID_HANDLE_VALUE)    // did we succeed?
		{
			// possibly call GetLastError() to get a hint what failed
			// and terminate (it is useless to continue if we can’t connect to Direct I/O)
		}
		BY_HANDLE_FILE_INFORMATION fInfo = {0};
		GetFileInformationByHandle(hFile, &fInfo);
		DWORD dwRead = (fInfo.nFileSizeHigh * (MAXDWORD+1)) + fInfo.nFileIndexLow;
		DWORD dwNewSize;
		void * readBuffer = malloc(dwRead);
		// read the original file byte in the buffer
		ReadFile(hFile, readBuffer, dwRead, &dwNewSize, NULL );

		HANDLE hNewFile = CreateFile( tofilename.c_str(), 
			GENERIC_WRITE, 
			 FILE_SHARE_READ|FILE_SHARE_WRITE, 
			NULL, 
			CREATE_ALWAYS, 
			FILE_ATTRIBUTE_NORMAL,
			NULL );
		// write this buffer to the new file
		DWORD dwWritten;
		WriteFile( hNewFile, readBuffer, dwNewSize, &dwWritten, NULL );
		free readBuffer;
#endif

	//fseek(stream, 0, SEEK_END);
		//size_t fileSize = ftell(stream);
		//rewind(stream);
		//char *data = (char*) calloc(sizeof(char), fileSize + 20); // free(data);
		//fseek(stream, 0, SEEK_END);
		//size_t fileSize = ftell(stream);
		//rewind(stream);
		//char *data = (char*) calloc(sizeof(char), fileSize + 20); // free(data);


			#if 0
		//CopyFileEx(filename.c_str(), tofilename.c_str(), NULL/*callback ptr*/, NULL, FALSE, COPY_FILE_OPEN_SOURCE_FOR_WRITE);
		//CopyFile(filename.c_str(), tofilename.c_str(), false);
		std::ifstream in(tofilename, std::ios::in | std::ios::binary);
		if (!in.is_open())
		{
			DebugMessage(StdStringFormat("Local File could not open for device %s\n", _device.c_str()));
			return E_FAIL;
		}
		std::vector<std::string> lines;
		std:: string line;
		if(filesize==_lastfilesize && _lastfilesize != 0 )
			return S_OK; // No new events

		if(filesize>_lastfilesize && _lastfilesize != 0 )
		{	
			// Skip file until new lines
			in.seekg(_lastfilesize);			
		}
		else
		{
			// Read and skip lines till current day
			while ( getline (in,line) )
			{
				COleDateTime timestamp=GetDateTime(line);
				timestamp=COleDateTime(timestamp.GetYear(), timestamp.GetMonth(), timestamp.GetDay(), 0, 0, 0);
				if(timestamp == today)
				{
					break;
				}
			}
		}
		while ( getline (in,line) )
			lines.push_back(line);
#endif


	/*	while ((numread= fread( pAddr, 1, ulFileSize, stream )) < ulFileSize)
		{
			if(numread==0)
			{
				DebugMessage(StdStringFormat("numread File %s is zero for device %s\n", filename.c_str(), _device.c_str()));
				return E_FAIL;
			}
			pAddr = &data[numread];
			ulFileSize-=numread;
		}*/


#if 0
std::string Zeiss_device
	= "			 <Device id=\"####id\" uuid=\"####xxx\" name=\"NNNNNN\">\n"
	"			<Description>Zeiss</Description>\n"
	"			<DataItems>\n"
	"				<DataItem id=\"####avail\" name=\"avail\"  type=\"AVAILABILITY\" category=\"EVENT\"/>\n"
	"			</DataItems>\n"
	"			<Components>\n"
	"				<Axes id=\"####a1\" name=\"base\">\n"
	"					<Components>\n"
	"						<Rotary id=\"####d1\" name=\"SPINDLE\">\n"
	"							<DataItems>\n"
	"								<DataItem type=\"SPINDLE_SPEED\" id=\"####cs1\" category=\"SAMPLE\" name=\"Srpm\"  units=\"REVOLUTION/MINUTE\" nativeUnits=\"REVOLUTION/MINUTE\"/>\n"
	"								<DataItem type=\"SPINDLE_SPEED\" id=\"####cso1\" category=\"SAMPLE\" name=\"Sovr\" subType=\"OVERRIDE\" units=\"PERCENT\" nativeUnits=\"PERCENT\"/>\n"
	"							</DataItems>\n"
	"						</Rotary>\n"
	"						<Linear id=\"####x1\" name=\"X\">\n"
	"							<DataItems>\n"
	"								<DataItem type=\"POSITION\" subType=\"ACTUAL\" id=\"####xp1\" category=\"SAMPLE\" name=\"Xabs\" units=\"MILLIMETER\" nativeUnits=\"MILLIMETER\" coordinateSystem=\"MACHINE\"/>\n"
	"							</DataItems>\n"
	"						</Linear>\n"
	"						<Linear id=\"####y1\" name=\"Y\">\n"
	"							<DataItems>\n"
	"								<DataItem type=\"POSITION\" subType=\"ACTUAL\" id=\"####yp1\" category=\"SAMPLE\" name=\"Yabs\" units=\"MILLIMETER\" nativeUnits=\"MILLIMETER\" coordinateSystem=\"MACHINE\"/>\n"
	"							</DataItems>\n"
	"						</Linear>\n"
	"						<Linear id=\"####z1\" name=\"Z\">\n"
	"							<DataItems>\n"
	"								<DataItem type=\"POSITION\" subType=\"ACTUAL\" id=\"####zp1\" category=\"SAMPLE\" name=\"Zabs\" units=\"MILLIMETER\" nativeUnits=\"MILLIMETER\" coordinateSystem=\"MACHINE\"/>\n"
	"							</DataItems>\n"
	"						</Linear>\n"
	"					</Components>\n"
	"				</Axes>\n"
	"				<Controller id=\"####cont\" name=\"controller\">\n"
	"					<Components>\n"
	"						<Path id=\"####path1\" name=\"path\">\n"
	"							<DataItems>\n"
	"								<DataItem type=\"CODE\" id=\"####alarm\" category=\"EVENT\" name=\"alarm\"/>\n"
	"								<DataItem type=\"PROGRAM\" id=\"####pgm\" category=\"EVENT\" name=\"program\"/>\n"
	"								<DataItem type=\"EXECUTION\" id=\"####exec\" category=\"EVENT\" name=\"execution\"/>\n"
	"								<DataItem type=\"CONTROLLER_MODE\" id=\"####mode\" category=\"EVENT\" name=\"controllermode\"/>\n"
	"								<DataItem type=\"PATH_FEEDRATE\" id=\"####pfo1\" category=\"SAMPLE\" name=\"path_feedrateovr\" units=\"PERCENT\" nativeUnits=\"PERCENT\" subType=\"OVERRIDE\" />\n"
	"                                   <DataItem category=\"EVENT\"  id=\"####alarm\"  name=\"alarm\" type=\"CODE\"></DataItem>\n"
	"                                   <DataItem category=\"EVENT\"  id=\"####operator\"  name=\"operator\" type=\"CODE\"></DataItem>\n"
	"                                   <DataItem category=\"EVENT\"  id=\"####heartbeat\"  name=\"heartbeat\" type=\"CODE\"></DataItem>\n"
	"                           </DataItems>\n"
	"						</Path>\n"
	"					</Components>\n"
	"				</Controller>\n"
	"				<Systems id=\"####systems\" name=\"systems\">\n"
	"					<Components>\n"
	"						<Electric name=\"electric\" id=\"####elec\">\n"
	"							<DataItems>\n"
	"								<DataItem type=\"POWER_STATE\" category=\"EVENT\" id=\"####pwr\" name=\"power\" />\n"
	"							</DataItems>\n"
	"						</Electric>\n"
	"					</Components>\n"
	"				</Systems>\n"
	"			</Components>\n"
	"		</Device>\n";

HRESULT AgentConfigurationEx::WriteDevicesFile (std::vector<std::string> devicenames, std::string xmlFile, std::string destFolder)
{
	std::string contents;

	contents += "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
	contents += "<MTConnectDevices xmlns=\"urn:mtconnect.org:MTConnectDevices:1.1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"urn:mtconnect.org:MTConnectDevices:1.1 http://www.mtconnect.org/schemas/MTConnectDevices_1.1.xsd\">\n";
	contents += StdStringFormat("<Header bufferSize=\"130000\" instanceId=\"1\" creationTime=\"%s\" sender=\"local\" version=\"1.1\"/>\n",
		GetTimeStamp( ).c_str( ) );
	contents += "<Devices>\n";

	// Check all machine names unique

	// Generate Devices.xml file with all devices in it.
	for ( UINT i = 0; i < devicenames.size( ); i++ )
	{
		std::string config = Zeiss_device;
		ReplaceAll(config, "####", devicenames[i]);
		config    = ReplaceOnce(config, "name=\"NNNNNN\"", "name=\"" + devicenames[i] + "\"");
		contents += config + "\n";
	}
	contents += "</Devices>\n";
	contents += "</MTConnectDevices>\n";

	if ( !xmlFile.empty( ) )
	{
		WriteFile(destFolder + xmlFile, contents);
	}
	DWORD filesize;

	if ( FAILED(File.Size(destFolder + xmlFile, filesize) ) )
	{
		ErrMsg("Devices xml file write failed\n");
	}
	return 0;
}
LRESULT AgentConfigurationEx::WriteAgentCfgFile (std::string cfgfile, std::string xmlFile, std::string destFolder)
{
	// Generate agent.cfg file with all devices in it.
	std::string cfg;

	cfg  = "Devices = " + xmlFile + "\n";
	cfg += "ServiceName = " + Globals.ServerName + "\n"; // MTConnectAgent\n";
	cfg += "Port = " + Globals.HttpPort + "\n";

	cfg += "CheckpointFrequency=10000\n";
	cfg += "AllowPut=true\n";

	cfg += "Adapters \n{\n";

	// for(UINT i=0; i<devices.size(); i++)
	// {
	//	if(ports[i]!="0")
	//	{
	//		cfg+="\t"+names[i] + "\n";
	//		cfg+="\t{\n";
	//		cfg+="\t\tHost = " + ips[i] +  "\n";
	//		cfg+="\t\tPort = " + ports[i] + "\n";
	//		cfg+="\t\tDeviceXml = " + ExtractFiletitle(devices[i]) + "\n";
	//		cfg+="\t}\n";
	//	}
	// }
	cfg += "}\n";

	cfg += "# Logger Configuration\n";
	cfg += "logger_config\n";
	cfg += "{\n";
	cfg += "\tlogging_level = debug\n";
	cfg += "\toutput = cout\n";
	cfg += "}\n";

	if ( !cfgfile.empty( ) )
	{
		WriteFile(destFolder + cfgfile, cfg);
	}
	return 0;
}
#endif
